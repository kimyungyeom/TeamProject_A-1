// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url      = process.env.DATABASE_URL
}
// Users 테이블
model Users {
  userId    Int      @id @default(autoincrement()) @map("userId")
  userLevel Int      @map("userLevel")
  email     String   @unique @map("email")
  password  String   @map("password")
  profile   String?  @map("profile")
  phone     Int      @map("phone")
  address   String   @map("address")
  path      String   @map("path")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  // Users 테이블과 Posts 테이블 1:1 관계 설정
  Post Posts?
  // Users 테이블과 Reservations 테이블 1:N 관계 설정
  Reservation Reservations[]
  // Users 테이블과 Posts 테이블 1:N 관계 설정
  Review Reviews[]
  @@map("Users")
}
// Posts 테이블
model Posts {
  postId     Int      @id @default(autoincrement()) @map("postId")
  userId     Int      @unique @map("userId")
  title      String   @map("title")
  content    String   @map("content")
  price      Int      @map("price")
  startDate  DateTime @map("startDate")
  endDate    DateTime @map("endDate")
  career     String   @map("career")
  experience String   @map("experience")
  createdAt  DateTime @default(now()) @map("createdAt")
  updatedAt  DateTime @updatedAt @map("updatedAt")
  // Users 테이블과 관계 설정
  User Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  // Posts 테이블과 Reservations 테이블 1:N 관계 설정
  Reservation Reservations[]
  // Posts 테이블과 Reviews 테이블 1:N 관계 설정
  Review Reviews[]
  @@map("Posts")
}
// Reservations 테이블
model Reservations {
  reservationId Int      @id @default(autoincrement()) @map("reservationId")
  userId        Int      @map("userId")
  postId        Int      @map("postId")
  startDate     DateTime @map("startDate")
  endTime       DateTime @map("endTime")
  cats          Int      @map("cats")
  visitTime     DateTime @map("visitTime")
  pickupTime    DateTime @map("pickupTime")
  totalPrice    Int      @map("totalPrice")
  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt @map("updatedAt")
  // Users 테이블과 관계 설정
  User Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  // Posts 테이블과 관계 설정
  Post Posts @relation(fields: [postId], references: [postId], onDelete: Cascade)
  // Reservation 테이블과 Reviews 1:N 관계 설정
  Review Reviews[]
  @@map("Reservation")
}
// Reviews 테이블
model Reviews {
  reviewId      Int      @id @default(autoincrement()) @map("reviewId")
  userId        Int      @map("userId")
  postId        Int      @map("postId")
  reservationId Int      @map("reservationId")
  comment       String   @map("comment")
  rating        Int      @map("rating")
  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt @map("updatedAt")
  // Users 테이블과 관계 설정
  User Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  // Posts 테이블과 관계 설정
  Post Posts @relation(fields: [postId], references: [postId], onDelete: Cascade)
  // Reservations 테이블과 관계 설정
  Reservation Reservations @relation(fields: [reservationId], references: [reservationId], onDelete: Cascade)
  @@map("Reviews")
}