generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  user_id      Int            @id @default(autoincrement()) @map("user_id")
  user_level   Int            @default(1) @map("user_level")
  email        String         @unique @map("email")
  password     String         @map("password")
  name         String         @map("name")
  phone        String         @map("phone")
  google_id    String?        @map("google_id")
  kakao_id     String?        @map("kakao_id")
  profile      String?        @map("profile")
  created_at   DateTime       @default(now()) @map("created_at")
  updated_at   DateTime       @updatedAt @map("updated_at")

  store        stores?
  reservation  reservations[]
  review       reviews[]

  @@map("users")
}

model stores {
  store_id      Int            @id @default(autoincrement()) @map("store_id")
  user_id       Int            @unique @map("user_id")
  title         String         @map("title")
  content       String         @map("content")
  price         Int            @map("price")
  images        Json           @map("images") 
  able_date     Json           @map("able_date")
  experience    String         @map("experience")
  created_at    DateTime       @default(now()) @map("created_at")
  updated_at    DateTime       @updatedAt @map("updated_at")

  user          users          @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  reservation   reservations[]
  review        reviews[]
  @@map("store")
}

model reservations {
  reserve_id    Int       @id @default(autoincrement()) @map("reserve_id")
  user_id       Int       @map("user_id")
  store_id      Int       @map("store_id")
  reserve_date  Json      @map("reserve_date")
  cats          Int       @map("cats")
  res_comment   String    @map("res_comment")
  approved      String    @map("approved")
  visit_time    String    @map("visit_time")
  pickup_time   String    @map("pickup_time")
  total_price   Int       @map("total_price")
  created_at    DateTime  @default(now()) @map("created_at")
  updated_at    DateTime  @updatedAt @map("updated_at")

  store         stores     @relation(fields: [store_id], references: [store_id], onDelete: Cascade)
  user          users      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  review        reviews[]

  @@map("reservations")
}

model reviews {
  review_id      Int          @id @default(autoincrement()) @map("review_id")
  user_id        Int          @map("user_id")
  store_id       Int          @map("store_id")
  reserve_id     Int          @map("reserve_id")
  comment        String       @map("comment")
  rating         Float        @map("rating")
  created_at     DateTime     @default(now()) @map("created_at")
  updated_at     DateTime     @updatedAt @map("updated_at")

  store          stores       @relation(fields: [store_id], references: [store_id], onDelete: Cascade)
  reservation    reservations @relation(fields: [reserve_id], references: [reserve_id], onDelete: Cascade)
  user           users        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("reviews")
}